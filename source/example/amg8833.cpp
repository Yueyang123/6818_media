/*
 * @Description: AMG8833红外成像仪应用代码
 * @Autor: YURI
 * @Date: 2022-01-30 18:34:31
 * @LastEditors: YURI
 * @LastEditTime: 2022-02-04 04:54:59
 */
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include "framebuffer.h"
#include "opencv_mat.h"
#define AMG88xx_PIXEL_TEMP_CONVERSION 0.25
using namespace cv;
#define MIN_TEMP   0
#define MAX_TEMP   30

const unsigned short camColors[] = {0x480F,
            0x400F,0x400F,0x400F,0x4010,0x3810,0x3810,0x3810,0x3810,0x3010,0x3010,
            0x3010,0x2810,0x2810,0x2810,0x2810,0x2010,0x2010,0x2010,0x1810,0x1810,
            0x1811,0x1811,0x1011,0x1011,0x1011,0x0811,0x0811,0x0811,0x0011,0x0011,
            0x0011,0x0011,0x0011,0x0031,0x0031,0x0051,0x0072,0x0072,0x0092,0x00B2,
            0x00B2,0x00D2,0x00F2,0x00F2,0x0112,0x0132,0x0152,0x0152,0x0172,0x0192,
            0x0192,0x01B2,0x01D2,0x01F3,0x01F3,0x0213,0x0233,0x0253,0x0253,0x0273,
            0x0293,0x02B3,0x02D3,0x02D3,0x02F3,0x0313,0x0333,0x0333,0x0353,0x0373,
            0x0394,0x03B4,0x03D4,0x03D4,0x03F4,0x0414,0x0434,0x0454,0x0474,0x0474,
            0x0494,0x04B4,0x04D4,0x04F4,0x0514,0x0534,0x0534,0x0554,0x0554,0x0574,
            0x0574,0x0573,0x0573,0x0573,0x0572,0x0572,0x0572,0x0571,0x0591,0x0591,
            0x0590,0x0590,0x058F,0x058F,0x058F,0x058E,0x05AE,0x05AE,0x05AD,0x05AD,
            0x05AD,0x05AC,0x05AC,0x05AB,0x05CB,0x05CB,0x05CA,0x05CA,0x05CA,0x05C9,
            0x05C9,0x05C8,0x05E8,0x05E8,0x05E7,0x05E7,0x05E6,0x05E6,0x05E6,0x05E5,
            0x05E5,0x0604,0x0604,0x0604,0x0603,0x0603,0x0602,0x0602,0x0601,0x0621,
            0x0621,0x0620,0x0620,0x0620,0x0620,0x0E20,0x0E20,0x0E40,0x1640,0x1640,
            0x1E40,0x1E40,0x2640,0x2640,0x2E40,0x2E60,0x3660,0x3660,0x3E60,0x3E60,
            0x3E60,0x4660,0x4660,0x4E60,0x4E80,0x5680,0x5680,0x5E80,0x5E80,0x6680,
            0x6680,0x6E80,0x6EA0,0x76A0,0x76A0,0x7EA0,0x7EA0,0x86A0,0x86A0,0x8EA0,
            0x8EC0,0x96C0,0x96C0,0x9EC0,0x9EC0,0xA6C0,0xAEC0,0xAEC0,0xB6E0,0xB6E0,
            0xBEE0,0xBEE0,0xC6E0,0xC6E0,0xCEE0,0xCEE0,0xD6E0,0xD700,0xDF00,0xDEE0,
            0xDEC0,0xDEA0,0xDE80,0xDE80,0xE660,0xE640,0xE620,0xE600,0xE5E0,0xE5C0,
            0xE5A0,0xE580,0xE560,0xE540,0xE520,0xE500,0xE4E0,0xE4C0,0xE4A0,0xE480,
            0xE460,0xEC40,0xEC20,0xEC00,0xEBE0,0xEBC0,0xEBA0,0xEB80,0xEB60,0xEB40,
            0xEB20,0xEB00,0xEAE0,0xEAC0,0xEAA0,0xEA80,0xEA60,0xEA40,0xF220,0xF200,
            0xF1E0,0xF1C0,0xF1A0,0xF180,0xF160,0xF140,0xF100,0xF0E0,0xF0C0,0xF0A0,
            0xF080,0xF060,0xF040,0xF020,0xF800};

short signed_To_unsigned(short val)
{
	short absVal = (val & 0x7FF);
	return (val & 0x800) ? 0 - absVal : absVal ;
}
opencv_mat*           mat_convert; 
framebuffer *fb;
#define RGB565_RED      0xf800
#define RGB565_GREEN    0x07e0
#define RGB565_BLUE     0x001f
int main(int argc,void **argv)
{
    int fd,i;
    Mat image,show;
    char* filename=NULL;
    unsigned char buf[128];
	unsigned char rgbbuf[8*8*3];
	int color_index=0;
    short data[64];
	short recast;
	short converted;
	fb=new framebuffer("/dev/fb0");
    filename = (char*)argv[1];
    fd = open(filename, O_RDWR);//打开dev/firstdrv设备文件
    mat_convert=new opencv_mat(8,8);
    if (fd < 0)//小于0说明没有成功
    {
        printf("error, can't open %s\n", filename);
        return 0;
    }
    while (1)
    {
        read(fd,buf,128);
        for(i=0; i<64; i++)
	    {
            unsigned char pos = i *2;
            recast = ((short)buf[pos + 1] << 8) | ((short)buf[pos]);        
            converted = signed_To_unsigned(recast) * AMG88xx_PIXEL_TEMP_CONVERSION;
            data[i] = converted;
	    }    
        for(int j=0;j<8;j++){
            for(int k=0;k<8;k++)
            {
				color_index= (data[8*j+k]-MIN_TEMP) *( 255/(MAX_TEMP-MIN_TEMP));
                if(color_index<0){
				    rgbbuf[8*3*j+3*k]=0;
                    rgbbuf[8*3*j+3*k+1]=0;
                    rgbbuf[8*3*j+3*k+2]=0;
                }else if(color_index>255){
                    rgbbuf[8*3*j+3*k]=0xFF;
                    rgbbuf[8*3*j+3*k+1]=0xFF;
                    rgbbuf[8*3*j+3*k+2]=0xFF;
                }else{
                    rgbbuf[8*3*j+3*k+2]=(camColors[color_index]&RGB565_BLUE)<<3;
                    rgbbuf[8*3*j+3*k+1]=(camColors[color_index]&RGB565_GREEN)>>3;
                    rgbbuf[8*3*j+3*k]=(camColors[color_index]&RGB565_RED)>>8;
                }
                
            }     
        }
        image=mat_convert->opencv_convert(rgbbuf);
        resize(image,show,Size(0,0),200,130);
		fb->show_rgbbuffer(show.data,0,0,show.cols,show.rows);
    }
    close(fd);
}